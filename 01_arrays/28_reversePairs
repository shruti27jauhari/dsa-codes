class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        vector<int> temp(n); // shared temp array
        return mergeSort(nums, 0, n - 1, temp);
    }

    int mergeSort(vector<int>& arr, int low, int high, vector<int>& temp) {
        if (low >= high) return 0;

        int mid = (low + high) / 2;
        int count = mergeSort(arr, low, mid, temp);
        count += mergeSort(arr, mid + 1, high, temp);
        count += countPairs(arr, low, mid, high);

        // Skip merge if already sorted
        if (arr[mid] <= arr[mid + 1]) return count;

        merge(arr, low, mid, high, temp);
        return count;
    }

    void merge(vector<int>& arr, int low, int mid, int high, vector<int>& temp) {
        int left = low, right = mid + 1, idx = low;

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp[idx++] = arr[left++];
            } else {
                temp[idx++] = arr[right++];
            }
        }

        while (left <= mid) temp[idx++] = arr[left++];
        while (right <= high) temp[idx++] = arr[right++];

        for (int i = low; i <= high; i++) {
            arr[i] = temp[i];
        }
    }

    int countPairs(vector<int>& arr, int low, int mid, int high) {
        int count = 0, right = mid + 1;
        for (int i = low; i <= mid; i++) {
            while (right <= high && (long long)arr[i] > 2LL * arr[right])
                right++;
            count += (right - (mid + 1));
        }
        return count;
    }
};
