#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

class Solution {
public:
    long long hrss(vector<int>& piles, int mid) {
        int n = piles.size();
        long long hr = 0;
        for (int i = 0; i < n; i++) {
            hr += (piles[i] + mid - 1) / mid; // No floating point
        }
        return hr;
    }

    int minEatingSpeed(vector<int>& piles, int h) {
        int n = piles.size();
        int low = 1, high = *max_element(piles.begin(), piles.end());
        int ans = high; // store final answer
        while (low <= high) {
            int mid = low + (high - low) / 2;
            long long hrs = hrss(piles, mid);
            if (hrs <= h) {
                ans = mid; // store best found speed
                high = mid - 1; // try to minimize further
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
