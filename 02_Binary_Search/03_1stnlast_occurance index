class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int first=foccur(n, target, nums);
        if(first==-1) return{-1,-1};
        int last=loccur( n,target, nums);
        return {first,last};
    }
    int foccur(int n, int target, vector<int>& nums){
        int f=-1,high=n-1,low=0;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                f=mid;
                high=mid-1;
            }
            else if(nums[mid]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return f;
    }
    int loccur(int n, int target, vector<int>& nums){
         int l=-1,high=n-1,low=0;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                l=mid;
                low=mid+1;
            }
            else if(nums[mid]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
           
        }
         return l;
    }
};
