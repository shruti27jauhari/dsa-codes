class Solution {
public:
int m,n;
vector<vector<int>> direction ={{1,0},{0,1},{-1,0},{0,-1}};
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        m=heights.size();
        n=heights[0].size();

        vector<vector<bool>> pacific(m,vector<bool>(n,false));
        vector<vector<bool>> atlantic(m,vector<bool>(n,false));

        for(int i=0;i<m;i++) dfs(i,0,heights,pacific);
        for(int j=0;j<n;j++) dfs(0,j,heights,pacific);

        for(int i=0;i<m;i++) dfs(i,n-1,heights,pacific);
        for(int j=0;j<n;j++) dfs(m-1,j,heights,pacific);

        vector<vector<int>> result;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(atlantic[i][j] && pacific[i][j]){
                    result.push_back({i,j});
                }
            }
        }
        return result;
    }
     void dfs(int i,int j,vector<vector<int>>&heights,vector<vector<bool>>&visited){
            visited[i][j]=true;

            for(auto&d : directions){

                int x=i+d[0],y=j+d[1];

            if(x<0||x>=m||y<0||y>=n) continue;
            if(heights[x][y] < height[i][j]) continue;
            if(visited[x][y]==true) continue;

            dfs(x,y,heights,visited);
            }

        }


};
