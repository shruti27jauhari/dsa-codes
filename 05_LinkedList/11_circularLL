class CircularLinkedList {
private:
    Node* last; // Pointer to the last node

public:
    CircularLinkedList() : last(nullptr) {}

    // Insertion at the beginning
    void insertAtBeginning(int data) {
        Node* newNode = new Node(data);
        if (last == nullptr) {
            last = newNode;
            last->next = last;
        } else {
            newNode->next = last->next;
            last->next = newNode;
        }
    }
    
    // Insertion at the end
    void insertAtEnd(int data) {
        Node* newNode = new Node(data);
        if (last == nullptr) {
            last = newNode;
            last->next = last;
        } else {
            newNode->next = last->next;
            last->next = newNode;
            last = newNode;
        }
    }

    // Insertion at a specific position
    void insertAtPosition(int data, int pos) {
        if (pos <= 0) {
            std::cout << "Invalid position" << std::endl;
            return;
        }
        if (pos == 1) {
            insertAtBeginning(data);
            return;
        }
        Node* newNode = new Node(data);
        if (last == nullptr) {
            last = newNode;
            last->next = last;
        } else {
            Node* current = last->next;
            int count = 1;
            while (current != last && count < pos - 1) {
                current = current->next;
                count++;
            }
            if (current == last && count < pos -1 ) {
                std::cout << "Invalid position" << std::endl;
                return;
            }
            newNode->next = current->next;
            current->next = newNode;
            if (current == last) {
                last = newNode;
            }
        }
    }

    // Deletion at the beginning
    void deleteAtBeginning() {
        if (last == nullptr) {
            std::cout << "List is empty" << std::endl;
            return;
        }
        Node* temp = last->next;
        if (last->next == last) {
            last = nullptr;
        } else {
            last->next = temp->next;
        }
        delete temp;
    }

    // Deletion at the end
    void deleteAtEnd() {
        if (last == nullptr) {
            std::cout << "List is empty" << std::endl;
            return;
        }
        if (last->next == last) {
            delete last;
            last = nullptr;
            return;
        }
        Node* current = last->next;
        while (current->next != last) {
            current = current->next;
        }
        current->next = last->next;
        delete last;
        last = current;
    }

    // Deletion at a specific position
    void deleteAtPosition(int pos) {
      if (last == nullptr) {
            std::cout << "List is empty" << std::endl;
            return;
        }
        if (pos <= 0) {
            std::cout << "Invalid position" << std::endl;
            return;
        }
        if (pos == 1) {
            deleteAtBeginning();
            return;
        }
        Node* current = last->next;
        int count = 1;
        while(current != last && count < pos - 1) {
            current = current->next;
            count++;
        }
        if (current == last && count < pos -1) {
            std::cout << "Invalid position" << std::endl;
            return;
        }
        Node* temp = current->next;
        current->next = temp->next;
        if (temp == last) {
            last = current;
        }
        delete temp;
    }

    // Traversal
    void display() {
        if (last == nullptr) {
            std::cout << "List is empty" << std::endl;
            return;
        }
        Node* current = last->next;
        do {
            std::cout << current->data << " ";
            current = current->next;
        } while (current != last->next);
        std::cout << std::endl;
    }
};
