#include <iostream>
#include <vector>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int data1, Node* next1) {
        this->data = data1;
        this->next = next1;
    }

    Node(int data1) {
        this->data = data1;
        this->next = nullptr;
    }
};

Node* InsertHead(Node* head, int val) {
    Node* temp = new Node(val, head);
    return temp;
}

void printll(Node* head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

Node* deleteEnd(Node* head) {
    if (head == nullptr || head->next == nullptr) {
        delete head;
        return nullptr;
    }

    Node* temp = head;
    while (temp->next->next != nullptr) {
        temp = temp->next;
    }
    delete temp->next;
    temp->next = nullptr;
    return head;
}

Node* deleteAny(int p, Node* head) {
    if (head == nullptr) {
        return nullptr;
    }

    if (p == 0) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return head;
    }

    Node* curr = head;
    for (int i = 0; i < p - 1; i++) {
        if (curr == nullptr || curr->next == nullptr) return head;
        curr = curr->next;
    }

    if (curr->next == nullptr) return head;

    Node* temp = curr->next;
    curr->next = curr->next->next;
    delete temp;
    return head;
}

int main() {
    int val = 100;
    vector<int> arr = {2, 4, 5, 6};
    int point = 2;

    Node* head = new Node(arr[0]);
    head->next = new Node(arr[1]);
    head->next->next = new Node(arr[2]);
    head->next->next->next = new Node(arr[3]);

    head = InsertHead(head, val);
    head = deleteEnd(head);
    head = deleteAny(point, head);
    printll(head);

    return 0;
}
